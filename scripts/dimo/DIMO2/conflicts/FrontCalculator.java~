/*=============================================================================
   Objective Reduction Algorithms for Evolutionary Multiobjective Optimization

  =============================================================================
  copyright  2006-2009  Systems Optimization Group
                        Computer Engineering and Networks Laboratory (TIK)
                        ETH Zurich
                        8092 Zurich
                        Switzerland
                        
                        and
                        
                  2011  System Modeling and Optimization Team (sysmo)
						Laboratoire d'Informatique (LIX)
						École Polytechnique
						91128 Palaiseau Cedex
						France 
  author                Dimo Brockhoff, brockho@lix.polytechnique.fr
  version               May 23, 2011
  =============================================================================
  related papers:
  [bz2010a] D. Brockhoff and E. Zitzler. Automated Aggregation and Omission of
            Objectives to Handle Many-Objective Problems. In Conference on
            Multiple Objective and Goal Programming (MOPGP 2008), Lecture Notes
            in Economics and Mathematical Systems, pages 81–102. Springer, 2010.

  [bz2009c] D. Brockhoff and E. Zitzler. Objective Reduction in Evolutionary
            Multiobjective Optimization: Theory and Applications. Evolutionary
            Computation, 17(2):135–166, 2009

  [bz2007d] D. Brockhoff and E. Zitzler: Dimensionality Reduction in
            Multiobjective Optimization: The Minimum Objective Subset Problem.
            In K. H. Waldmann and U. M. Stocker, editors, Operations Research
            Proceedings 2006, pages 423–429. Springer, 2007.

  [bz2007c] D. Brockhoff and E. Zitzler. Improving Hypervolume-based
            Multiobjective Evolutionary Algorithms by Using Objective Reduction
            Methods. In Congress on Evolutionary Computation (CEC 2007), pages
            2086–2093. IEEE Press, 2007
            
  [bz2007a] D. Brockhoff and E. Zitzler. Offline and Online Objective Reduction
            in Evolutionary Multiobjective Optimization Based on Objective
            Conflicts. TIK Report 269, Institut für Technische Informatik und
            Kommunikationsnetze, ETH Zürich, April 2007.            
            
  [bz2006d] D. Brockhoff and E. Zitzler. Are All Objectives Necessary? On
            Dimensionality Reduction in Evolutionary Multiobjective
            Optimization. In T. P. Runarsson et al., editors, Conference on
            Parallel Problem Solving from Nature (PPSN IX), volume 4193 of
            LNCS, pages 533–542, Berlin, Germany, 2006. Springer.
            
  [bz2006c] D. Brockhoff and E. Zitzler. Dimensionality Reduction in
            Multiobjective Optimization with (Partial) Dominance Structure
            Preservation: Generalized Minimum Objective Subset Problems. TIK
            Report 247, Institut für Technische Informatik und
            Kommunikationsnetze, ETH Zürich, April 2006.
            
  [bz2006a] D. Brockhoff and E. Zitzler. On Objective Conflicts and Objective
            Reduction in Multiple Criteria Optimization. TIK Report 243,
            Institut für Technische Informatik und Kommunikationsnetze, ETH
            Zürich, February 2006.            
  =============================================================================
*/

package conflicts;

import java.util.Vector;

public class FrontCalculator {
	
	double[][] points;  // objective values of points ([individual id][objective number]) 
	int m=0;            // number of individuals
	int k=0;            // number of objectives + 1
	
	public FrontCalculator(double[][] points) {
		this.m = points.length;
		this.k = points[0].length;
		this.points = new double[m][k];
		for (int i=0; i<points.length; i++) {
			for (int j=0; j<points[0].length; j++) {
				this.points[i][j] = points[i][j];
			}
		}
	}
	
	/**
	 * Prints all dominated (dominatedPoints==true) or non-dominated
	 * (dominatedPoints=false) points with objective values in points[][]
	 * with respect to the weak dominance relation and minimization. 
	 * 
	 * pre: points[][] should not contain indifferent solution pairs!
	 */
	public void printDominatedNonDominated(boolean dominatedPoints, String outputfilename){
		Vector<String> lines = new Vector<String>(); // to store output
		
		for (int i=0; i<this.m; i++) {		 
			boolean nondominated = true;
			for (int j=0; j<this.m; j++) {
				if (i != j) {
					boolean dominatedByJ = true;
					/* starting from column 1 because column 0 contains the
					 * id's of the individuals: */
					for (int k=1; k<this.k; k++) {
						if (this.points[i][k] < this.points[j][k]) {
							dominatedByJ = false;
						}
					}
					if (dominatedByJ) {
						nondominated = false;
					} 
				}
			}
			if (dominatedPoints) {
				if (!nondominated) {
					lines.add(print(i));
				}
			}
			else {
				if (nondominated) {
					lines.add(print(i));
				}
			}
				
		}
		
		/* finally output everything */
		Output.print(lines, outputfilename);
	}
	
	private String print(int i) {
		String str = new Double(points[i][0]).toString();				
		String cs = ".0";
		String cs2 = "";
		str = str.replace(cs, cs2);
		String returnString = str + " ";
		for (int s=1; s<this.k; s++) {
			returnString = returnString + this.points[i][s] + " ";
		}
		
		return returnString;
	}

	/**
	 * @param args args[0]: filename
	 * 			   args[1]: if == 0 or omitted, the nondominated points are printed
	 * 					    if == 1, the dominated points are printed
	 * 	           an additional optional argument '-o outputfilename' will indicate
	 *             that all output is written to the file 'outputfilename'
	 */
	public static void main(String[] args) {
		String outputfilename = ""; // standard: output written to stdout
		if (args == null || args.length < 1 || args.length > 4) {
			System.out.println("Wrong usage.");
			System.out.println();
			System.out.println("Usage:");
			System.out.println("   FrontCalculator filename dominated");
			System.out.println("   or");
			System.out.println("   FrontCalculator filename dominated -o outputfilename");
			System.out.println();
			System.out.println("where");
			System.out.println("   the nondominated points in filename are printed if");
			System.out.println("      dominated = 0");
			System.out.println("   and the dominated points in filename are printed if");
			System.out.println("      dominated = 1");
			System.out.println();
			System.out.println("Adding '-o outputfilename' as last argument will result");
			System.out.println("   in writing all output to the file 'outputfilename'");
			System.out.println("   instead of writing to standard output.");
		} else if (args.length == 4) {
			if (args[args.length - 2].compareTo("-o") == 0) {
				outputfilename = args[args.length - 1];
				String filename = args[0];
				FileProblem problem = new FileProblem(filename);
				FrontCalculator fc = new FrontCalculator(problem.getPoints());
				int dominated = new Integer(args[1]).intValue();
				if (dominated == 0) {
					fc.printDominatedNonDominated(false, outputfilename);
				} else {
					fc.printDominatedNonDominated(true, outputfilename);
				}
			} else {
				System.out.println("Error: second last argument is not '-o'.");
			}
		} else if (args.length == 3) {
			if (args[args.length - 2].compareTo("-o") == 0) {
				outputfilename = args[args.length - 1];
				String filename = args[0];
				FileProblem problem = new FileProblem(filename);
				FrontCalculator fc = new FrontCalculator(problem.getPoints());
				fc.printDominatedNonDominated(false, outputfilename);
			} else {
				System.out.println("Error: second last argument is not '-o'.");
			}
		} else if (args.length == 2) {
			String filename = args[0];
			FileProblem problem = new FileProblem(filename);
			FrontCalculator fc = new FrontCalculator(problem.getPoints());
			int dominated = new Integer(args[1]).intValue();
			if (dominated == 0) {
				fc.printDominatedNonDominated(false, outputfilename);
			} else {
				fc.printDominatedNonDominated(true, outputfilename);
			}
		} else if (args.length == 1){
			String filename = args[0];
			FileProblem problem = new FileProblem(filename);
			FrontCalculator fc = new FrontCalculator(problem.getPoints());
			fc.printDominatedNonDominated(false, outputfilename);
		}
	}

}
