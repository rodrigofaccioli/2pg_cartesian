/*=============================================================================
   Objective Reduction Algorithms for Evolutionary Multiobjective Optimization

  =============================================================================
  copyright  2006-2009  Systems Optimization Group
                        Computer Engineering and Networks Laboratory (TIK)
                        ETH Zurich
                        8092 Zurich
                        Switzerland
                        
                        and
                        
                  2011  System Modeling and Optimization Team (sysmo)
						Laboratoire d'Informatique (LIX)
						École Polytechnique
						91128 Palaiseau Cedex
						France 
  author                Dimo Brockhoff, brockho@lix.polytechnique.fr
  version               May 23, 2011
  =============================================================================
  related papers:
  [bz2010a] D. Brockhoff and E. Zitzler. Automated Aggregation and Omission of
            Objectives to Handle Many-Objective Problems. In Conference on
            Multiple Objective and Goal Programming (MOPGP 2008), Lecture Notes
            in Economics and Mathematical Systems, pages 81–102. Springer, 2010.

  [bz2009c] D. Brockhoff and E. Zitzler. Objective Reduction in Evolutionary
            Multiobjective Optimization: Theory and Applications. Evolutionary
            Computation, 17(2):135–166, 2009

  [bz2007d] D. Brockhoff and E. Zitzler: Dimensionality Reduction in
            Multiobjective Optimization: The Minimum Objective Subset Problem.
            In K. H. Waldmann and U. M. Stocker, editors, Operations Research
            Proceedings 2006, pages 423–429. Springer, 2007.

  [bz2007c] D. Brockhoff and E. Zitzler. Improving Hypervolume-based
            Multiobjective Evolutionary Algorithms by Using Objective Reduction
            Methods. In Congress on Evolutionary Computation (CEC 2007), pages
            2086–2093. IEEE Press, 2007
            
  [bz2007a] D. Brockhoff and E. Zitzler. Offline and Online Objective Reduction
            in Evolutionary Multiobjective Optimization Based on Objective
            Conflicts. TIK Report 269, Institut für Technische Informatik und
            Kommunikationsnetze, ETH Zürich, April 2007.            
            
  [bz2006d] D. Brockhoff and E. Zitzler. Are All Objectives Necessary? On
            Dimensionality Reduction in Evolutionary Multiobjective
            Optimization. In T. P. Runarsson et al., editors, Conference on
            Parallel Problem Solving from Nature (PPSN IX), volume 4193 of
            LNCS, pages 533–542, Berlin, Germany, 2006. Springer.
            
  [bz2006c] D. Brockhoff and E. Zitzler. Dimensionality Reduction in
            Multiobjective Optimization with (Partial) Dominance Structure
            Preservation: Generalized Minimum Objective Subset Problems. TIK
            Report 247, Institut für Technische Informatik und
            Kommunikationsnetze, ETH Zürich, April 2006.
            
  [bz2006a] D. Brockhoff and E. Zitzler. On Objective Conflicts and Objective
            Reduction in Multiple Criteria Optimization. TIK Report 243,
            Institut für Technische Informatik und Kommunikationsnetze, ETH
            Zürich, February 2006.            
  =============================================================================
*/

package conflicts;

public class Relation implements Comparable<Relation>{
	
	long id;
	int n;
	boolean rel[][];
	int numberOfRelatedPairs; // the number of edges in the corresponding relation graph
	
	public Relation() {
		id = System.currentTimeMillis();
		n=1;
		rel = new boolean[n][n];
		numberOfRelatedPairs = 0;
	}

	public Relation(int n) {
		id = System.currentTimeMillis();
		this.n=n;
		rel = new boolean[n][n];
		numberOfRelatedPairs = 0;
	}
	
	public Relation(long id, int n) {
		this.id = id;
		this.n=n;
		rel = new boolean[n][n];
		numberOfRelatedPairs = 0;
	}
	
	
	/**
	 * Constructor 
	 * 
	 * pre: 2D array rel should be quadratic
	 */
	public Relation(long id, boolean[][] rel) {
		this.id = id;
		n = rel.length;
		numberOfRelatedPairs = 0;
		this.rel = new boolean[n][n];
		for (int i=0; i<n; i++) {
			for (int j=0;j<n;j++) {
				this.rel[i][j] = rel[i][j];
				if (rel[i][j]) {
					numberOfRelatedPairs++;
				}
			}			
		}
	}

	/**
	 * @param i element i of the set {1,...n}
	 * @param j element j of the set {1,...n}
	 * @return true if i is in relation with j / 
	 *                 iRj / 
	 *                 (i,j)\in R
	 *         false if i is not in relation with j
	 *           and if i or j is not in {1,...,n}
	 */
	public boolean inrelation(int i, int j) {
		if (i<n && i >= 0 && j<n && j>=0) {
			return rel[i][j]; 
		} else
			return false;
	}
	
		
	/**
	 * @param i index of first element 
	 * @param j index of second element
	 * @param b 
	 * 
	 * Sets i and j in relation iff b == true.
	 */
	public void setinrelation(int i, int j, boolean b) {
		if (i>=0 && i<= n && j>=0 && j<=n) {
			if (rel[i][j] == false && b) {
				this.numberOfRelatedPairs++;
			} else if (rel[i][j] == true && !b) {				
				this.numberOfRelatedPairs--;
			}		
			rel[i][j] = b;			
		} else {
			System.out.println("ERROR while setting relation: index out of bounds");
		}
			
	}
	
	
	/**
	 * @param id the ID of the resulting new relation
	 * @param r a relation on set {1,...,n} x {1,...,n} 
	 * @return the intersection of this relation and relation r
	 */
	public Relation intersect(long id, Relation r) {
		if (r.n != this.n) {
			return null;						
		}
		Relation s = new Relation(id, rel);
		for (int i=0;i<n;i++) {
			for (int j=0; j<n; j++) {
				s.setinrelation(i,j, (rel[i][j] & r.rel[i][j])); 
			}
		}		
	   return s;
	}
	
	/**
	 * Returns a new relation with ID id, containing all edges from 'this', except
	 * the edges in r.
	 */
	public Relation minus(long id, Relation r){
		Relation result = this.getExactCopy();
		for (int i=0; i<this.n; i++) {
			for (int j=0; j<this.n; j++) {
				if (r.inrelation(i,j)) {
					result.setinrelation(i,j, false);
				}
			}
		}
		return result;
	}
	
	
	/**
	 * @return the complementary relation
	 */
	public Relation getComplement() {
		Relation newRel = new Relation(this.n);
		for (int i=0; i<this.n; i++) {
			for (int j=0; j<this.n;j++) {
				newRel.setinrelation(i,j, !this.rel[i][j]);				
			}			
		}
		return newRel;
	}
	
	/* returns the number of pairs, which stand in relation*/
	public int getNumberOfRelatedPairs() {
		return numberOfRelatedPairs;
	}
	
	
	/**
	 * @param r a Relation
	 * @return true iff the relation r and this relation are the same
	 */
	public boolean equal(Relation r) {
		boolean equal = true;
		if (this.n != r.n) {
			return false;
		}
		for (int i=0; i<this.n; i++) {
			for(int j=0; j<this.n; j++) {
				if (this.rel[i][j] != r.inrelation(i,j)) {
					return false;
				}
			}
		}
		return equal;
	}

	/**
	 * Returns an exact (deep) copy of 'this'.
	 */
	public Relation getExactCopy() {
		Relation r = new Relation(this.id, this.n);
		for (int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				r.setinrelation(i,j,this.rel[i][j]);
			}
		}
		return r;
	}
	
	public void print() {
		System.out.println("ID= " + id + " of " + this);
		for (int i=0;i<n;i++) {
			for (int j=0;j<n;j++) {
				if (this.inrelation(i,j)) {
					System.out.print("X");
				} else
					System.out.print("-");
			}
			System.out.println();
		}
	}
	
	
	/** 
	 * Compares this relation with 'o'. A relation is smaller than another
	 * if it has less true-entries than the other relation.
	 */
	public int compareTo(Relation o) {
		if (this.numberOfRelatedPairs < o.numberOfRelatedPairs) {
			return -1;
		} else if (this.numberOfRelatedPairs == o.numberOfRelatedPairs) {
			return 0;
		} else {
			return 1;
		}		
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

}